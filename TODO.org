* Need to do
- Make up a name for the language
- Make base ResolveEnv with built-in functions
  - Expose parser-combinators to MLOID
- How do booleans work between MLOID & racket?
- How can MLOID generate racket code?
- Implement syntax-extension forms
- Implement more forms
- Implement pattern-matching, either in MLOID or Racket

* Would be nice
- Print info about tags bound at repl.
- Error handling at repl.
- Control-C at repl.
- Generate a well-defined IR instead of Racket.
- A good way to define plain old infix functions
  (as opposed to infix syntax, which is more general)
- Parameter for debug-spew, macros that print only if it's #t.

* What needs to go in the base resolve-env?
- io: puts, print, format
- strings: string-append
- arithmetic: + - * / <= < > >= div mod
- equality: equal?
- parsing: ???

- hashes, envs, Maybe, Monoid, ExtPoint, booleans
- the extension points (@envs @exprs @infixes etc)
