* Need to do
- Make up a name for the language
- Implement pattern-matching, either in MLOID or Racket
- Modules and imports
- Implement more forms
- Expose parser-combinators to MLOID
  - syntax: f@(x,y) = (<$> f x y)
    @x = pure x?
- How can MLOID generate racket code?
- Implement syntax-extension forms

* Would be nice
- Some way to do renaming/qualified imports
- Enforce lowercase variables, Capitalized Constructors?
- Print info about tags bound at repl.
- Error handling at repl.
- Control-C at repl.
- Generate a well-defined IR instead of Racket.
- A good way to define plain old infix functions
  (as opposed to infix syntax, which is more general)
- A good way to define symbolic prefix functions.
- Parameter for debug-spew, macros that print only if it's #t.

* What needs to go in the base resolve-env?
- io: say, print, format
- strings: string-append
- arithmetic: + - * / <= < > >= div mod
- equality: equal?
- parsing: ???

- hashes, envs, Maybe, Monoid, ExtPoint, booleans
- the extension points (@envs @exprs @infixes etc)
