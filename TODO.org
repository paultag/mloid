* Need to do
- Identifier-level syntax (see design.org)?
- Make up a name for the language
- Modules and imports
- Implement more forms
- Expose parser-combinators to MLOID
  - syntax: f@(x,y) = (<$> f x y)
    @x = pure x?
- How can MLOID generate racket code?
- Implement syntax-extension forms
- Patterns in more places ("fun", "val", lambdas)

* Would be nice
- Tests! and some way of running them!
- Some way to do renaming/qualified imports
- Error handling at repl.
- Control-C at repl.
- Generate a well-defined IR instead of Racket.
- A good way to define plain old infix functions
  (as opposed to infix syntax, which is more general)
- Symbol prefix functions?
- Parameter for debug-spew, macros that print only if it's #t.
- Infix operators made infix by the in-language prelude rather than built-in.
- Check that use of parens in tag pattern matches tag declaration?
- Disallow module identifiers in expressions?
- Avoid generating large `on-failure' values in ir-case.
- *Pretty*-print results of compilation in debug mode

* What functions need to be built-in?
- io: say, print, format
- strings: string-append
- arithmetic: + - * / <= < > >= quo rem
- equality: equal?
- parsing: ???

- hashes, envs, Maybe, Monoid, ExtPoint, booleans
- the extension points (@envs @exprs @infixes etc)
